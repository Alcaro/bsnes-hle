--- libretro-gitorious.cpp	2014-06-06 10:37:33.090322723 +0200
+++ target-libretro/libretro.cpp	2014-06-25 02:27:02.840461704 +0200
@@ -64,6 +64,16 @@
 /*fffe*/  0xc0, 0xff         //reset vector location ($ffc0)
 };
 
+static void retro_log_default(enum retro_log_level level, const char *fmt, ...)
+{
+  fprintf(stderr, "[bsnes]: ");
+  va_list args;
+  va_start(args, fmt);
+  vfprintf(stderr, fmt, args);
+  va_end(args);
+}
+static retro_log_printf_t output;
+
 struct Callbacks : Emulator::Interface::Bind {
   retro_video_refresh_t pvideo_refresh;
   retro_audio_sample_t paudio_sample;
@@ -121,7 +131,7 @@
 
   uint32_t video_buffer[512 * 480];
 
-  void videoRefresh(const uint32_t *palette, const uint32_t *data, unsigned pitch, unsigned width, unsigned height) {
+  void videoRefresh(const uint32_t* palette, const uint32_t* data, unsigned pitch, unsigned width, unsigned height) override {
     if (!overscan) {
       data += 8 * 1024;
 
@@ -136,22 +146,22 @@
        for (unsigned x = 0; x < width; x++)
           ptr[x] = palette[data[x]];
 
-    pvideo_refresh(video_buffer, width, height, width << 2);
+    pvideo_refresh(video_buffer, width, height, width*sizeof(uint32_t));
     pinput_poll();
   }
 
-  void audioSample(int16_t left, int16_t right) {
+  void audioSample(int16_t left, int16_t right) override {
     paudio_sample(left, right);
   }
 
-  int16_t inputPoll(unsigned port, unsigned device, unsigned id) {
+  int16_t inputPoll(unsigned port, unsigned device, unsigned id) override {
     if(id > 11) return 0;
     return pinput_state(port, snes_to_retro(device), 0, snes_to_retro(device, id));
   }
 
-  void saveRequest(unsigned id, string p) {
+  void saveRequest(unsigned id, string p) override {
     if (manifest) {
-      fprintf(stderr, "[bSNES]: [Save]: ID %u, Request \"%s\".\n", id, (const char*)p);
+      output(RETRO_LOG_INFO, "[Save]: ID %u, Request \"%s\".\n", id, (const char*)p);
       string save_path = {path(0), p};
       filestream stream(save_path, file::mode::write);
       iface->save(id, stream);
@@ -173,11 +183,11 @@
         mmapstream stream(load_path);
         iface->load(id, stream);
       } else {
-        fprintf(stderr, "[bSNES]: Cannot find requested file in system directory: \"%s\".\n", (const char*)load_path);
+        output(RETRO_LOG_ERROR, "Cannot find requested file in system directory: \"%s\".\n", (const char*)load_path);
         load_request_error = true;
       }
     } else {
-      fprintf(stderr, "[bSNES]: Cannot find requested file: \"%s\" in ROM directory nor system directory.\n", (const char*)p);
+      output(RETRO_LOG_ERROR, "Cannot find requested file: \"%s\" in ROM directory nor system directory.\n", (const char*)p);
       load_request_error = true;
     }
   }
@@ -208,7 +218,7 @@
   }
 
   void loadRequestManifest(unsigned id, const string& p) {
-    fprintf(stderr, "[bSNES]: [Manifest]: ID %u, Request \"%s\".\n", id, (const char*)p);
+    output(RETRO_LOG_INFO, "[Manifest]: ID %u, Request \"%s\".\n", id, (const char*)p);
     switch(id) {
       case SuperFamicom::ID::IPLROM:
         loadIPLROM(id);
@@ -225,7 +235,7 @@
   }
 
   void loadRequestMemory(unsigned id, const string& p) {
-    fprintf(stderr, "[bSNES]: [Memory]: ID %u, Request \"%s\".\n", id, (const char*)p);
+    output(RETRO_LOG_INFO, "[Memory]: ID %u, Request \"%s\".\n", id, (const char*)p);
     switch(id) {
       case SuperFamicom::ID::Manifest:
         loadManifest(id);
@@ -241,7 +251,7 @@
       case SuperFamicom::ID::SDD1ROM:
       case SuperFamicom::ID::HitachiDSPROM:
       case SuperFamicom::ID::SPC7110PROM:
-        fprintf(stderr, "[bSNES]: Load ROM.\n");
+        output(RETRO_LOG_INFO, "Load ROM.\n");
         loadROM(id);
         break;
 
@@ -296,37 +306,37 @@
         break;
 
       default:
-        fprintf(stderr, "[bSNES]: Load BIOS.\n");
+        output(RETRO_LOG_INFO, "Load BIOS.\n");
         loadFile(id, p);
         break;
     }
   }
 
-  void loadRequest(unsigned id, string p) {
+  void loadRequest(unsigned id, string p) override {
     if (manifest)
        loadRequestManifest(id, p);
     else
        loadRequestMemory(id, p);
-    fprintf(stderr, "[bSNES]: Complete load request.\n");
+    output(RETRO_LOG_INFO, "Complete load request.\n");
   }
 
-  void loadRequest(unsigned id, string p, string manifest) {
+  void loadRequest(unsigned id, string p, string manifest) override {
     switch (id) {
       case SuperFamicom::ID::SuperGameBoy:
-        fprintf(stderr, "[bSNES]: Loading GB ROM.\n");
+        output(RETRO_LOG_INFO, "Loading GB ROM.\n");
         loadSGBROMManifest(id);
         break;
 
       default:
-        fprintf(stderr, "[bSNES]: Didn't do anything with loadRequest (3 arg).\n");
+        output(RETRO_LOG_INFO, "Didn't do anything with loadRequest (3 arg).\n");
     }
   }
 
-  string path(unsigned) {
+  string path(unsigned) override {
     return string(basename);
   }
 
-  uint32_t videoColor(unsigned, uint16_t, uint16_t r, uint16_t g, uint16_t b) {
+  uint32_t videoColor(unsigned, uint16_t, uint16_t r, uint16_t g, uint16_t b) override {
     r >>= 8;
     g >>= 8;
     b >>= 8;
@@ -401,10 +411,24 @@
   return RETRO_API_VERSION;
 }
 
+static unsigned superfx_freq_orig;
+
 void retro_set_environment(retro_environment_t environ_cb)
 {
    core_bind.penviron = environ_cb;
 
+   static const struct retro_variable vars[] = {
+      { "bsnes_chip_hle", "Special Chip Accuracy; LLE|HLE" },
+      { "bsnes_superfx_overclock", "SuperFX speed; 100%|150%|200%|300%|400%|500%|1000%" },
+         //Any integer is usable here, but there is no such thing as "any integer" in core options.
+      { NULL, NULL },
+   };
+   core_bind.penviron(RETRO_ENVIRONMENT_SET_VARIABLES, (void*)vars);
+
+   static struct retro_log_callback log={retro_log_default};
+   core_bind.penviron(RETRO_ENVIRONMENT_GET_LOG_INTERFACE, (void*)&log);
+   output=log.log;
+
    static const retro_subsystem_memory_info sgb_memory[] = {
       { "srm", RETRO_MEMORY_SNES_GAME_BOY_RAM },
       { "rtc", RETRO_MEMORY_SNES_GAME_BOY_RTC },
@@ -473,6 +497,19 @@
    environ_cb(RETRO_ENVIRONMENT_SET_CONTROLLER_INFO, (void*)ports);
 }
 
+static void update_variables(void) {
+   struct retro_variable var;
+   
+   if (SuperFamicom::cartridge.has_superfx()) {
+      var.key="bsnes_superfx_overclock";
+      var.value=NULL;
+      if (core_bind.penviron(RETRO_ENVIRONMENT_GET_VARIABLE, &var) && var.value) {
+         unsigned percent=strtoul(var.value, NULL, 10);//we can assume that the input is one of our advertised options
+         SuperFamicom::superfx.frequency=(uint64)superfx_freq_orig*percent/100;
+      }
+   }
+}
+
 void retro_set_video_refresh(retro_video_refresh_t video_refresh) { core_bind.pvideo_refresh = video_refresh; }
 void retro_set_audio_sample(retro_audio_sample_t audio_sample)    { core_bind.paudio_sample  = audio_sample; }
 void retro_set_audio_sample_batch(retro_audio_sample_batch_t)     {}
@@ -505,6 +542,9 @@
 }
 
 void retro_run(void) {
+  bool updated = false;
+  if (core_bind.penviron(RETRO_ENVIRONMENT_GET_VARIABLE_UPDATE, &updated) && updated)
+    update_variables();
   SuperFamicom::system.run();
 }
 
@@ -525,6 +565,7 @@
   return SuperFamicom::system.unserialize(s);
 }
 
+#if 0
 struct CheatList {
   bool enable;
   string code;
@@ -532,27 +573,33 @@
 };
 
 static vector<CheatList> cheatList;
+#endif
 
 void retro_cheat_reset(void) {
+#if 0
   cheatList.reset();
   core_interface.setCheats();
+#endif
 }
 
 void retro_cheat_set(unsigned index, bool enable, const char *code) {
+#if 0
+  cheatList.reserve(index+1);
   cheatList[index].enable = enable;
   cheatList[index].code = code;
   lstring list;
-
+  
   for(unsigned n = 0; n < cheatList.size(); n++) {
     if(cheatList[n].enable) list.append(cheatList[n].code);
   }
-
+  
   core_interface.setCheats(list);
+#endif
 }
 
 void retro_get_system_info(struct retro_system_info *info) {
   static string version("v", Emulator::Version, " (", Emulator::Profile, ")");
-  info->library_name     = "bSNES";
+  info->library_name     = "bsnes";
   info->library_version  = version;
   info->valid_extensions = "sfc|smc|bml";
   info->need_fullpath    = false;
@@ -577,15 +624,25 @@
 }
 
 static bool snes_load_cartridge_normal(
-  const char *rom_xml, const uint8_t *rom_data, unsigned rom_size
+  const char *rom_xml, const uint8_t *rom_data, unsigned rom_size, bool special_chip_hle
 ) {
   string xmlrom = (rom_xml && *rom_xml) ? string(rom_xml) : SuperFamicomCartridge(rom_data, rom_size).markup;
 
   core_bind.rom_data = rom_data;
   core_bind.rom_size = rom_size;
   core_bind.xmlrom   = xmlrom;
-  fprintf(stderr, "[bSNES]: XML map:\n%s\n", (const char*)xmlrom);
-  core_bind.iface->load(SuperFamicom::ID::SuperFamicom);
+  output(RETRO_LOG_INFO, "BML map:\n");
+  char* xmlrom_c = xmlrom.data();
+  while (xmlrom_c)
+  {
+    char* xmlrom_linebreak=strchr(xmlrom_c, '\n');
+    if (xmlrom_linebreak) *xmlrom_linebreak='\0';
+    if (*xmlrom_c) output(RETRO_LOG_INFO, "%s\n", xmlrom_c);
+    if (!xmlrom_linebreak) break;
+    *xmlrom_linebreak='\n';
+    xmlrom_c=xmlrom_linebreak+1;
+  }
+  core_bind.iface->load(SuperFamicom::ID::SuperFamicom, special_chip_hle);
   SuperFamicom::system.power();
   return !core_bind.load_request_error;
 }
@@ -650,8 +707,8 @@
 ) {
   string xmlrom_sgb = (rom_xml && *rom_xml) ? string(rom_xml) : SuperFamicomCartridge(rom_data, rom_size).markup;
   string xmlrom_gb  = (dmg_xml && *dmg_xml) ? string(dmg_xml) : GameBoyCartridge((uint8_t*)dmg_data, dmg_size).markup;
-  fprintf(stderr, "[bSNES]: Markup SGB: %s\n", (const char*)xmlrom_sgb);
-  fprintf(stderr, "[bSNES]: Markup GB: %s\n", (const char*)xmlrom_gb);
+  output(RETRO_LOG_INFO, "Markup SGB: %s\n", (const char*)xmlrom_sgb);
+  output(RETRO_LOG_INFO, "Markup GB: %s\n", (const char*)xmlrom_gb);
 
   core_bind.rom_data    = rom_data;
   core_bind.rom_size    = rom_size;
@@ -660,8 +717,8 @@
   core_bind.xmlrom      = xmlrom_sgb;
   core_bind.xmlrom_gb   = xmlrom_gb;
 
-  core_bind.iface->load(SuperFamicom::ID::SuperGameBoy);
   core_bind.iface->load(SuperFamicom::ID::SuperFamicom);
+  core_bind.iface->load(SuperFamicom::ID::SuperGameBoy);
   SuperFamicom::system.power();
   return !core_bind.load_request_error;
 }
@@ -670,6 +727,10 @@
   // Support loading a manifest directly.
   core_bind.manifest = info->path && string(info->path).endsWith(".bml");
 
+  struct retro_variable var = {"bsnes_chip_hle", "LLE"};
+  core_bind.penviron(RETRO_ENVIRONMENT_GET_VARIABLE, (void*)&var);
+  bool special_chip_hle = (!strcmp(var.value, "HLE"));
+
   const uint8_t *data = (const uint8_t*)info->data;
   size_t size = info->size;
   if ((size & 0x7ffff) == 512) {
@@ -697,9 +758,19 @@
   std::string manifest;
   if (core_bind.manifest)
     manifest = std::string((const char*)info->data, info->size); // Might not be 0 terminated.
-  return snes_load_cartridge_normal(core_bind.manifest ? manifest.data() : info->meta, data, size);
+  
+  bool ret=snes_load_cartridge_normal(core_bind.manifest ? manifest.data() : info->meta, data, size, special_chip_hle);
+  SuperFamicom::bus.libretro_mem_map.reverse();
+  retro_memory_map map={SuperFamicom::bus.libretro_mem_map.data(), SuperFamicom::bus.libretro_mem_map.size()};
+  core_bind.penviron(RETRO_ENVIRONMENT_SET_MEMORY_MAPS, (void*)&map);
+  
+  if (SuperFamicom::cartridge.has_superfx())
+    superfx_freq_orig=SuperFamicom::superfx.frequency;
+  
+  return ret;
 }
 
+
 bool retro_load_game_special(unsigned game_type,
       const struct retro_game_info *info, size_t num_info) {
   core_bind.manifest = false;
@@ -827,7 +898,7 @@
   switch(id) {
     case RETRO_MEMORY_SAVE_RAM:
       size = core_bind.sram_size;
-      fprintf(stderr, "[bSNES]: SRAM memory size: %u.\n", (unsigned)size);
+      output(RETRO_LOG_INFO, "SRAM memory size: %u.\n", (unsigned)size);
       break;
     case RETRO_MEMORY_RTC:
       size = 0;
