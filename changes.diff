Only in bsneshle094/ananke/obj: .gitignore
Only in bsneshle094: bsnes_accuracy_libretro.so
Only in bsneshle094: bsnes_balanced_libretro.so
Only in bsneshle094: changes.diff
Only in bsneshle094: changes-libretro.diff
Only in bsneshle094: diff.sh
diff -ru higan_v094-source/emulator/emulator.hpp bsneshle094/emulator/emulator.hpp
--- higan_v094-source/emulator/emulator.hpp	2014-01-20 07:36:22.000000000 +0100
+++ bsneshle094/emulator/emulator.hpp	2014-04-26 16:20:16.498065832 +0200
@@ -143,7 +143,7 @@
 typedef uint30_t uint30;
 typedef uint31_t uint31;
 typedef uint32_t uint32;
-typedef uint_t<33> uint33;
+typedef nall::uint_t<33> uint33;
 typedef uint64_t uint64;
 
 typedef varuint_t<unsigned> varuint;
diff -ru higan_v094-source/emulator/interface.hpp bsneshle094/emulator/interface.hpp
--- higan_v094-source/emulator/interface.hpp	2013-12-23 08:39:57.000000000 +0100
+++ bsneshle094/emulator/interface.hpp	2014-08-19 14:54:43.757727345 +0200
@@ -59,6 +59,7 @@
     virtual string path(unsigned) { return ""; }
     virtual string server() { return ""; }
     virtual void notify(string text) { print(text, "\n"); }
+    virtual unsigned altImplementation(unsigned) { return 0; }
   };
   Bind* bind = nullptr;
 
Only in bsneshle094: .git
Only in bsneshle094: install.sh
diff -ru higan_v094-source/libco/amd64.c bsneshle094/libco/amd64.c
--- higan_v094-source/libco/amd64.c	2014-01-20 07:37:11.000000000 +0100
+++ bsneshle094/libco/amd64.c	2015-01-12 16:24:31.162569232 +0100
@@ -9,95 +9,190 @@
 #include <assert.h>
 #include <stdlib.h>
 
+#if defined(__GNUC__) && !defined(_WIN32)
+//#define CO_USE_INLINE_ASM
+#endif
+
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 static thread_local long long co_active_buffer[64];
 static thread_local cothread_t co_active_handle = 0;
+#ifndef CO_USE_INLINE_ASM
 static void (*co_swap)(cothread_t, cothread_t) = 0;
+#endif
 
 #ifdef _WIN32
-  //ABI: Win64
-  static unsigned char co_swap_function[] = {
-    0x48, 0x89, 0x22, 0x48, 0x8B, 0x21, 0x58, 0x48, 0x89, 0x6A, 0x08, 0x48, 0x89, 0x72, 0x10, 0x48,
-    0x89, 0x7A, 0x18, 0x48, 0x89, 0x5A, 0x20, 0x4C, 0x89, 0x62, 0x28, 0x4C, 0x89, 0x6A, 0x30, 0x4C,
-    0x89, 0x72, 0x38, 0x4C, 0x89, 0x7A, 0x40, 0x48, 0x81, 0xC2, 0x80, 0x00, 0x00, 0x00, 0x48, 0x83,
-    0xE2, 0xF0, 0x0F, 0x29, 0x32, 0x0F, 0x29, 0x7A, 0x10, 0x44, 0x0F, 0x29, 0x42, 0x20, 0x44, 0x0F,
-    0x29, 0x4A, 0x30, 0x44, 0x0F, 0x29, 0x52, 0x40, 0x44, 0x0F, 0x29, 0x5A, 0x50, 0x44, 0x0F, 0x29,
-    0x62, 0x60, 0x44, 0x0F, 0x29, 0x6A, 0x70, 0x44, 0x0F, 0x29, 0xB2, 0x80, 0x00, 0x00, 0x00, 0x44,
-    0x0F, 0x29, 0xBA, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x69, 0x08, 0x48, 0x8B, 0x71, 0x10, 0x48,
-    0x8B, 0x79, 0x18, 0x48, 0x8B, 0x59, 0x20, 0x4C, 0x8B, 0x61, 0x28, 0x4C, 0x8B, 0x69, 0x30, 0x4C,
-    0x8B, 0x71, 0x38, 0x4C, 0x8B, 0x79, 0x40, 0x48, 0x81, 0xC1, 0x80, 0x00, 0x00, 0x00, 0x48, 0x83,
-    0xE1, 0xF0, 0x0F, 0x29, 0x31, 0x0F, 0x29, 0x79, 0x10, 0x44, 0x0F, 0x29, 0x41, 0x20, 0x44, 0x0F,
-    0x29, 0x49, 0x30, 0x44, 0x0F, 0x29, 0x51, 0x40, 0x44, 0x0F, 0x29, 0x59, 0x50, 0x44, 0x0F, 0x29,
-    0x61, 0x60, 0x44, 0x0F, 0x29, 0x69, 0x70, 0x44, 0x0F, 0x29, 0xB1, 0x80, 0x00, 0x00, 0x00, 0x44,
-    0x0F, 0x29, 0xB9, 0x90, 0x00, 0x00, 0x00, 0xFF, 0xE0,
-  };
-
-  #include <windows.h>
-
-  void co_init() {
-    DWORD old_privileges;
-    VirtualProtect(co_swap_function, sizeof co_swap_function, PAGE_EXECUTE_READWRITE, &old_privileges);
-  }
+//ABI: Win64
+static unsigned char co_swap_function[] = {
+  0x48, 0x89, 0x22,                                 /* mov    [rdx],rsp        */
+  0x48, 0x8b, 0x21,                                 /* mov    rsp,[rcx]        */
+  0x58,                                             /* pop    rax              */
+  0x48, 0x89, 0x6a, 0x08,                           /* mov    [rdx+0x8],rbp    */
+  0x48, 0x89, 0x72, 0x10,                           /* mov    [rdx+0x10],rsi   */
+  0x48, 0x89, 0x7a, 0x18,                           /* mov    [rdx+0x18],rdi   */
+  0x48, 0x89, 0x5a, 0x20,                           /* mov    [rdx+0x20],rbx   */
+  0x4c, 0x89, 0x62, 0x28,                           /* mov    [rdx+0x28],r12   */
+  0x4c, 0x89, 0x6a, 0x30,                           /* mov    [rdx+0x30],r13   */
+  0x4c, 0x89, 0x72, 0x38,                           /* mov    [rdx+0x38],r14   */
+  0x4c, 0x89, 0x7a, 0x40,                           /* mov    [rdx+0x40],r15   */
+  0x48, 0x81, 0xc2, 0x80, 0x00, 0x00, 0x00,         /* add    rdx,0x80         */
+  0x48, 0x83, 0xe2, 0xf0,                           /* and    rdx,-0x10        */
+  0x0f, 0x29, 0x32,                                 /* movaps [rdx],xmm6       */
+  0x0f, 0x29, 0x7a, 0x10,                           /* movaps [rdx+0x10],xmm7  */
+  0x44, 0x0f, 0x29, 0x42, 0x20,                     /* movaps [rdx+0x20],xmm8  */
+  0x44, 0x0f, 0x29, 0x4a, 0x30,                     /* movaps [rdx+0x30],xmm9  */
+  0x44, 0x0f, 0x29, 0x52, 0x40,                     /* movaps [rdx+0x40],xmm10 */
+  0x44, 0x0f, 0x29, 0x5a, 0x50,                     /* movaps [rdx+0x50],xmm11 */
+  0x44, 0x0f, 0x29, 0x62, 0x60,                     /* movaps [rdx+0x60],xmm12 */
+  0x44, 0x0f, 0x29, 0x6a, 0x70,                     /* movaps [rdx+0x70],xmm13 */
+  0x44, 0x0f, 0x29, 0xb2, 0x80, 0x00, 0x00, 0x00,   /* movaps [rdx+0x80],xmm14 */
+  0x44, 0x0f, 0x29, 0xba, 0x90, 0x00, 0x00, 0x00,   /* movaps [rdx+0x90],xmm15 */
+  0x48, 0x8b, 0x69, 0x08,                           /* mov    rbp,[rcx+0x8]    */
+  0x48, 0x8b, 0x71, 0x10,                           /* mov    rsi,[rcx+0x10]   */
+  0x48, 0x8b, 0x79, 0x18,                           /* mov    rdi,[rcx+0x18]   */
+  0x48, 0x8b, 0x59, 0x20,                           /* mov    rbx,[rcx+0x20]   */
+  0x4c, 0x8b, 0x61, 0x28,                           /* mov    r12,[rcx+0x28]   */
+  0x4c, 0x8b, 0x69, 0x30,                           /* mov    r13,[rcx+0x30]   */
+  0x4c, 0x8b, 0x71, 0x38,                           /* mov    r14,[rcx+0x38]   */
+  0x4c, 0x8b, 0x79, 0x40,                           /* mov    r15,[rcx+0x40]   */
+  0x48, 0x81, 0xc1, 0x80, 0x00, 0x00, 0x00,         /* add    rcx,0x80         */
+  0x48, 0x83, 0xe1, 0xf0,                           /* and    rcx,-0x10        */
+  0x0f, 0x29, 0x31,                                 /* movaps [rcx],xmm6       */
+  0x0f, 0x29, 0x79, 0x10,                           /* movaps [rcx+0x10],xmm7  */
+  0x44, 0x0f, 0x29, 0x41, 0x20,                     /* movaps [rcx+0x20],xmm8  */
+  0x44, 0x0f, 0x29, 0x49, 0x30,                     /* movaps [rcx+0x30],xmm9  */
+  0x44, 0x0f, 0x29, 0x51, 0x40,                     /* movaps [rcx+0x40],xmm10 */
+  0x44, 0x0f, 0x29, 0x59, 0x50,                     /* movaps [rcx+0x50],xmm11 */
+  0x44, 0x0f, 0x29, 0x61, 0x60,                     /* movaps [rcx+0x60],xmm12 */
+  0x44, 0x0f, 0x29, 0x69, 0x70,                     /* movaps [rcx+0x70],xmm13 */
+  0x44, 0x0f, 0x29, 0xb1, 0x80, 0x00, 0x00, 0x00,   /* movaps [rcx+0x80],xmm14 */
+  0x44, 0x0f, 0x29, 0xb9, 0x90, 0x00, 0x00, 0x00,   /* movaps [rcx+0x90],xmm15 */
+  0xff, 0xe0,                                       /* jmp    rax              */
+};
+
+#include <windows.h>
+
+void co_init(void)
+{
+   DWORD old_privileges;
+   VirtualProtect(co_swap_function,
+         sizeof(co_swap_function), PAGE_EXECUTE_READWRITE, &old_privileges);
+}
 #else
-  //ABI: SystemV
-  static unsigned char co_swap_function[] = {
-    0x48, 0x89, 0x26, 0x48, 0x8B, 0x27, 0x58, 0x48, 0x89, 0x6E, 0x08, 0x48, 0x89, 0x5E, 0x10, 0x4C,
-    0x89, 0x66, 0x18, 0x4C, 0x89, 0x6E, 0x20, 0x4C, 0x89, 0x76, 0x28, 0x4C, 0x89, 0x7E, 0x30, 0x48,
-    0x8B, 0x6F, 0x08, 0x48, 0x8B, 0x5F, 0x10, 0x4C, 0x8B, 0x67, 0x18, 0x4C, 0x8B, 0x6F, 0x20, 0x4C,
-    0x8B, 0x77, 0x28, 0x4C, 0x8B, 0x7F, 0x30, 0xFF, 0xE0,
-  };
-
-  #include <unistd.h>
-  #include <sys/mman.h>
-
-  void co_init() {
-    unsigned long long addr = (unsigned long long)co_swap_function;
-    unsigned long long base = addr - (addr % sysconf(_SC_PAGESIZE));
-    unsigned long long size = (addr - base) + sizeof co_swap_function;
-    mprotect((void*)base, size, PROT_READ | PROT_WRITE | PROT_EXEC);
-  }
+//ABI: SystemV
+#ifndef CO_USE_INLINE_ASM
+static unsigned char co_swap_function[] = {
+  0x48, 0x89, 0x26,                                 /* mov    [rsi],rsp      */
+  0x48, 0x8b, 0x27,                                 /* mov    rsp,[rdi]      */
+  0x58,                                             /* pop    rax            */
+  0x48, 0x89, 0x6e, 0x08,                           /* mov    [rsi+0x08],rbp */
+  0x48, 0x89, 0x5e, 0x10,                           /* mov    [rsi+0x10],rbx */
+  0x4c, 0x89, 0x66, 0x18,                           /* mov    [rsi+0x18],r12 */
+  0x4c, 0x89, 0x6e, 0x20,                           /* mov    [rsi+0x20],r13 */
+  0x4c, 0x89, 0x76, 0x28,                           /* mov    [rsi+0x28],r14 */
+  0x4c, 0x89, 0x7e, 0x30,                           /* mov    [rsi+0x30],r15 */
+  0x48, 0x8b, 0x6f, 0x08,                           /* mov    rbp,[rdi+0x08] */
+  0x48, 0x8b, 0x5f, 0x10,                           /* mov    rbx,[rdi+0x10] */
+  0x4c, 0x8b, 0x67, 0x18,                           /* mov    r12,[rdi+0x18] */
+  0x4c, 0x8b, 0x6f, 0x20,                           /* mov    r13,[rdi+0x20] */
+  0x4c, 0x8b, 0x77, 0x28,                           /* mov    r14,[rdi+0x28] */
+  0x4c, 0x8b, 0x7f, 0x30,                           /* mov    r15,[rdi+0x30] */
+  0xff, 0xe0,                                       /* jmp    rax            */
+};
+
+#include <unistd.h>
+#include <sys/mman.h>
+
+void co_init(void)
+{
+   unsigned long long addr = (unsigned long long)co_swap_function;
+   unsigned long long base = addr - (addr % sysconf(_SC_PAGESIZE));
+   unsigned long long size = (addr - base) + sizeof(co_swap_function);
+   mprotect((void*)base, size, PROT_READ | PROT_WRITE | PROT_EXEC);
+}
+#else
+void co_init(void) {}
+#endif
 #endif
 
-static void crash() {
+static void crash(void)
+{
   assert(0); /* called only if cothread_t entrypoint returns */
 }
 
-cothread_t co_active() {
-  if(!co_active_handle) co_active_handle = &co_active_buffer;
+cothread_t co_active(void)
+{
+  if (!co_active_handle)
+     co_active_handle = &co_active_buffer;
   return co_active_handle;
 }
 
-cothread_t co_create(unsigned int size, void (*entrypoint)(void)) {
-  cothread_t handle;
-  if(!co_swap) {
-    co_init();
-    co_swap = (void (*)(cothread_t, cothread_t))co_swap_function;
-  }
-  if(!co_active_handle) co_active_handle = &co_active_buffer;
-  size += 512; /* allocate additional space for storage */
-  size &= ~15; /* align stack to 16-byte boundary */
-
-  if(handle = (cothread_t)malloc(size)) {
-    long long *p = (long long*)((char*)handle + size); /* seek to top of stack */
-    *--p = (long long)crash;                           /* crash if entrypoint returns */
-    *--p = (long long)entrypoint;                      /* start of function */
-    *(long long*)handle = (long long)p;                /* stack pointer */
-  }
-
-  return handle;
-}
-
-void co_delete(cothread_t handle) {
-  free(handle);
-}
+cothread_t co_create(unsigned int size, void (*entrypoint)(void))
+{
+   cothread_t handle;
+
+#ifndef CO_USE_INLINE_ASM
+   if(!co_swap)
+   {
+      co_init();
+      co_swap = (void (*)(cothread_t, cothread_t))co_swap_function;
+   }
+#endif
 
-void co_switch(cothread_t handle) {
+   if (!co_active_handle)
+      co_active_handle = &co_active_buffer;
+   size += 512; /* allocate additional space for storage */
+   size &= ~15; /* align stack to 16-byte boundary */
+
+   if((handle = (cothread_t)malloc(size)))
+   {
+      long long *p = (long long*)((char*)handle + size); /* seek to top of stack */
+      *--p = (long long)crash;                           /* crash if entrypoint returns */
+      *--p = (long long)entrypoint;                      /* start of function */
+      *(long long*)handle = (long long)p;                /* stack pointer */
+   }
+
+   return handle;
+}
+
+void co_delete(cothread_t handle)
+{
+   free(handle);
+}
+
+#ifndef CO_USE_INLINE_ASM
+void co_switch(cothread_t handle)
+{
   register cothread_t co_previous_handle = co_active_handle;
   co_swap(co_active_handle = handle, co_previous_handle);
 }
+#else
+__asm__(
+".intel_syntax noprefix        \n"
+".globl co_switch              \n"
+"co_switch:                    \n"
+"mov rsi, co_active_handle[rip]\n"
+"mov [rsi],rsp                 \n"
+"mov [rsi+0x08],rbp            \n"
+"mov [rsi+0x10],rbx            \n"
+"mov [rsi+0x18],r12            \n"
+"mov [rsi+0x20],r13            \n"
+"mov [rsi+0x28],r14            \n"
+"mov [rsi+0x30],r15            \n"
+"mov co_active_handle[rip], rdi\n"
+"mov rsp,[rdi]                 \n"
+"mov rbp,[rdi+0x08]            \n"
+"mov rbx,[rdi+0x10]            \n"
+"mov r12,[rdi+0x18]            \n"
+"mov r13,[rdi+0x20]            \n"
+"mov r14,[rdi+0x28]            \n"
+"mov r15,[rdi+0x30]            \n"
+"ret                           \n"
+".att_syntax                   \n"
+);
+#endif
 
 #ifdef __cplusplus
 }
Only in bsneshle094/libco: armeabi.c
diff -ru higan_v094-source/libco/fiber.c bsneshle094/libco/fiber.c
--- higan_v094-source/libco/fiber.c	2014-01-20 07:37:11.000000000 +0100
+++ bsneshle094/libco/fiber.c	2015-01-12 11:12:54.470889641 +0100
@@ -17,33 +17,40 @@
 
 static thread_local cothread_t co_active_ = 0;
 
-static void __stdcall co_thunk(void *coentry) {
-  ((void (*)(void))coentry)();
+static void __stdcall co_thunk(void *coentry)
+{
+   ((void (*)(void))coentry)();
 }
 
-cothread_t co_active() {
-  if(!co_active_) {
-    ConvertThreadToFiber(0);
-    co_active_ = GetCurrentFiber();
-  }
-  return co_active_;
+cothread_t co_active(void)
+{
+   if(!co_active_)
+   {
+      ConvertThreadToFiber(0);
+      co_active_ = GetCurrentFiber();
+   }
+   return co_active_;
 }
 
-cothread_t co_create(unsigned int heapsize, void (*coentry)(void)) {
-  if(!co_active_) {
-    ConvertThreadToFiber(0);
-    co_active_ = GetCurrentFiber();
-  }
-  return (cothread_t)CreateFiber(heapsize, co_thunk, (void*)coentry);
+cothread_t co_create(unsigned int heapsize, void (*coentry)(void))
+{
+   if(!co_active_)
+   {
+      ConvertThreadToFiber(0);
+      co_active_ = GetCurrentFiber();
+   }
+   return (cothread_t)CreateFiber(heapsize, co_thunk, (void*)coentry);
 }
 
-void co_delete(cothread_t cothread) {
-  DeleteFiber(cothread);
+void co_delete(cothread_t cothread)
+{
+   DeleteFiber(cothread);
 }
 
-void co_switch(cothread_t cothread) {
-  co_active_ = cothread;
-  SwitchToFiber(cothread);
+void co_switch(cothread_t cothread)
+{
+   co_active_ = cothread;
+   SwitchToFiber(cothread);
 }
 
 #ifdef __cplusplus
diff -ru higan_v094-source/libco/libco.c bsneshle094/libco/libco.c
--- higan_v094-source/libco/libco.c	2014-01-20 07:37:11.000000000 +0100
+++ bsneshle094/libco/libco.c	2015-01-12 11:12:54.470889641 +0100
@@ -4,18 +4,16 @@
   license: public domain
 */
 
-#if defined(__GNUC__) && defined(__i386__)
+#if defined(__GNUC__) && defined(__i386__) || (defined(_MSC_VER) && defined(_M_IX86))
   #include "x86.c"
-#elif defined(__GNUC__) && defined(__amd64__)
+#elif defined(__GNUC__) && defined(__amd64__) || (defined(_MSC_VER) && defined(_M_AMD64))
   #include "amd64.c"
 #elif defined(__GNUC__) && defined(_ARCH_PPC)
   #include "ppc.c"
+#elif defined(__GNUC__) && (defined(__ARM_EABI__) || defined(__arm__))
+  #include "armeabi.c"
 #elif defined(__GNUC__)
   #include "sjlj.c"
-#elif defined(_MSC_VER) && defined(_M_IX86)
-  #include "x86.c"
-#elif defined(_MSC_VER) && defined(_M_AMD64)
-  #include "amd64.c"
 #elif defined(_MSC_VER)
   #include "fiber.c"
 #else
diff -ru higan_v094-source/libco/libco.h bsneshle094/libco/libco.h
--- higan_v094-source/libco/libco.h	2014-01-20 07:37:11.000000000 +0100
+++ bsneshle094/libco/libco.h	2015-01-12 11:12:54.470889641 +0100
@@ -21,7 +21,7 @@
 
 typedef void* cothread_t;
 
-cothread_t co_active();
+cothread_t co_active(void);
 cothread_t co_create(unsigned int, void (*)(void));
 void co_delete(cothread_t);
 void co_switch(cothread_t);
diff -ru higan_v094-source/libco/ppc.c bsneshle094/libco/ppc.c
--- higan_v094-source/libco/ppc.c	2014-01-20 07:37:11.000000000 +0100
+++ bsneshle094/libco/ppc.c	2015-01-12 11:12:54.474889641 +0100
@@ -363,45 +363,45 @@
 
 void co_delete( cothread_t t )
 {
-	free( t );
+   free(t);
 }
 
 static void co_init_( void )
 {
-	#if LIBCO_MPROTECT
-		/* TODO: pre- and post-pad PPC code so that this doesn't make other
-		data executable and writable */
-		long page_size = sysconf( _SC_PAGESIZE );
-		if ( page_size > 0 )
-		{
-			uintptr_t align = page_size;
-			uintptr_t begin = (uintptr_t) libco_ppc_code;
-			uintptr_t end   = begin + sizeof libco_ppc_code;
-			
-			/* Align beginning and end */
-			end   += align - 1;
-			end   -= end   % align;
-			begin -= begin % align;
-			
-			mprotect( (void*) begin, end - begin, PROT_READ | PROT_WRITE | PROT_EXEC );
-		}
-	#endif
-    
-	co_active_handle = co_create_( state_size, (uintptr_t) &co_switch );
+#if LIBCO_MPROTECT
+   /* TODO: pre- and post-pad PPC code so that this doesn't make other
+      data executable and writable */
+   long page_size = sysconf( _SC_PAGESIZE );
+   if ( page_size > 0 )
+   {
+      uintptr_t align = page_size;
+      uintptr_t begin = (uintptr_t) libco_ppc_code;
+      uintptr_t end   = begin + sizeof libco_ppc_code;
+
+      /* Align beginning and end */
+      end   += align - 1;
+      end   -= end   % align;
+      begin -= begin % align;
+
+      mprotect( (void*) begin, end - begin, PROT_READ | PROT_WRITE | PROT_EXEC );
+   }
+#endif
+
+   co_active_handle = co_create_( state_size, (uintptr_t) &co_switch );
 }
 
-cothread_t co_active()
+cothread_t co_active(void)
 {
-	if ( !co_active_handle )
-		co_init_();
-	
-	return co_active_handle;
+   if (!co_active_handle)
+      co_init_();
+
+   return co_active_handle;
 }
 
-void co_switch( cothread_t t )
+void co_switch(cothread_t t)
 {
-	cothread_t old = co_active_handle;
-	co_active_handle = t;
-	
-	CO_SWAP_ASM( t, old );
+   cothread_t old = co_active_handle;
+   co_active_handle = t;
+
+   CO_SWAP_ASM( t, old );
 }
diff -ru higan_v094-source/libco/sjlj.c bsneshle094/libco/sjlj.c
--- higan_v094-source/libco/sjlj.c	2014-01-20 07:37:11.000000000 +0100
+++ bsneshle094/libco/sjlj.c	2015-01-12 11:12:54.474889641 +0100
@@ -21,80 +21,93 @@
 extern "C" {
 #endif
 
-typedef struct {
-  sigjmp_buf context;
-  void (*coentry)(void);
-  void *stack;
+typedef struct
+{
+   sigjmp_buf context;
+   void (*coentry)(void);
+   void *stack;
 } cothread_struct;
 
 static thread_local cothread_struct co_primary;
 static thread_local cothread_struct *creating, *co_running = 0;
 
-static void springboard(int ignored) {
-  if(sigsetjmp(creating->context, 0)) {
-    co_running->coentry();
-  }
+static void springboard(int ignored)
+{
+   if(sigsetjmp(creating->context, 0))
+      co_running->coentry();
 }
 
-cothread_t co_active() {
-  if(!co_running) co_running = &co_primary;
+cothread_t co_active(void)
+{
+  if (!co_running)
+     co_running = &co_primary;
   return (cothread_t)co_running;
 }
 
-cothread_t co_create(unsigned int size, void (*coentry)(void)) {
-  if(!co_running) co_running = &co_primary;
-
-  cothread_struct *thread = (cothread_struct*)malloc(sizeof(cothread_struct));
-  if(thread) {
-    struct sigaction handler;
-    struct sigaction old_handler;
-
-    stack_t stack;
-    stack_t old_stack;
-
-    thread->coentry = thread->stack = 0;
-
-    stack.ss_flags = 0;
-    stack.ss_size = size;
-    thread->stack = stack.ss_sp = malloc(size);
-    if(stack.ss_sp && !sigaltstack(&stack, &old_stack)) {
-      handler.sa_handler = springboard;
-      handler.sa_flags = SA_ONSTACK;
-      sigemptyset(&handler.sa_mask);
-      creating = thread;
-
-      if(!sigaction(SIGUSR1, &handler, &old_handler)) {
-        if(!raise(SIGUSR1)) {
-          thread->coentry = coentry;
-        }
-        sigaltstack(&old_stack, 0);
-        sigaction(SIGUSR1, &old_handler, 0);
+cothread_t co_create(unsigned int size, void (*coentry)(void))
+{
+   if(!co_running)
+      co_running = &co_primary;
+
+   cothread_struct *thread = (cothread_struct*)malloc(sizeof(cothread_struct));
+
+   if(thread)
+   {
+      struct sigaction handler;
+      struct sigaction old_handler;
+
+      stack_t stack;
+      stack_t old_stack;
+
+      thread->coentry = thread->stack = 0;
+
+      stack.ss_flags = 0;
+      stack.ss_size = size;
+      thread->stack = stack.ss_sp = malloc(size);
+
+      if(stack.ss_sp && !sigaltstack(&stack, &old_stack))
+      {
+         handler.sa_handler = springboard;
+         handler.sa_flags = SA_ONSTACK;
+         sigemptyset(&handler.sa_mask);
+         creating = thread;
+
+         if(!sigaction(SIGUSR1, &handler, &old_handler))
+         {
+            if(!raise(SIGUSR1))
+               thread->coentry = coentry;
+            sigaltstack(&old_stack, 0);
+            sigaction(SIGUSR1, &old_handler, 0);
+         }
       }
-    }
 
-    if(thread->coentry != coentry) {
-      co_delete(thread);
-      thread = 0;
-    }
-  }
+      if(thread->coentry != coentry)
+      {
+         co_delete(thread);
+         thread = 0;
+      }
+   }
 
-  return (cothread_t)thread;
+   return (cothread_t)thread;
 }
 
-void co_delete(cothread_t cothread) {
-  if(cothread) {
-    if(((cothread_struct*)cothread)->stack) {
-      free(((cothread_struct*)cothread)->stack);
-    }
-    free(cothread);
-  }
+void co_delete(cothread_t cothread)
+{
+   if(cothread)
+   {
+      if(((cothread_struct*)cothread)->stack)
+         free(((cothread_struct*)cothread)->stack);
+      free(cothread);
+   }
 }
 
-void co_switch(cothread_t cothread) {
-  if(!sigsetjmp(co_running->context, 0)) {
-    co_running = (cothread_struct*)cothread;
-    siglongjmp(co_running->context, 1);
-  }
+void co_switch(cothread_t cothread)
+{
+   if(!sigsetjmp(co_running->context, 0))
+   {
+      co_running = (cothread_struct*)cothread;
+      siglongjmp(co_running->context, 1);
+   }
 }
 
 #ifdef __cplusplus
diff -ru higan_v094-source/libco/ucontext.c bsneshle094/libco/ucontext.c
--- higan_v094-source/libco/ucontext.c	2014-01-20 07:37:11.000000000 +0100
+++ bsneshle094/libco/ucontext.c	2015-01-12 11:12:54.474889641 +0100
@@ -28,38 +28,52 @@
 static thread_local ucontext_t co_primary;
 static thread_local ucontext_t *co_running = 0;
 
-cothread_t co_active() {
-  if(!co_running) co_running = &co_primary;
-  return (cothread_t)co_running;
+cothread_t co_active(void)
+{
+   if (!co_running)
+      co_running = &co_primary;
+   return (cothread_t)co_running;
 }
 
-cothread_t co_create(unsigned int heapsize, void (*coentry)(void)) {
-  if(!co_running) co_running = &co_primary;
-  ucontext_t *thread = (ucontext_t*)malloc(sizeof(ucontext_t));
-  if(thread) {
-    if((!getcontext(thread) && !(thread->uc_stack.ss_sp = 0)) && (thread->uc_stack.ss_sp = malloc(heapsize))) {
-      thread->uc_link = co_running;
-      thread->uc_stack.ss_size = heapsize;
-      makecontext(thread, coentry, 0);
-    } else {
-      co_delete((cothread_t)thread);
-      thread = 0;
-    }
-  }
-  return (cothread_t)thread;
+cothread_t co_create(unsigned int heapsize, void (*coentry)(void))
+{
+   if (!co_running)
+      co_running = &co_primary;
+   ucontext_t *thread = (ucontext_t*)malloc(sizeof(ucontext_t));
+
+   if(thread)
+   {
+      if((!getcontext(thread) && !(thread->uc_stack.ss_sp = 0)) && (thread->uc_stack.ss_sp = malloc(heapsize)))
+      {
+         thread->uc_link = co_running;
+         thread->uc_stack.ss_size = heapsize;
+         makecontext(thread, coentry, 0);
+      }
+      else
+      {
+         co_delete((cothread_t)thread);
+         thread = 0;
+      }
+   }
+   return (cothread_t)thread;
 }
 
-void co_delete(cothread_t cothread) {
-  if(cothread) {
-    if(((ucontext_t*)cothread)->uc_stack.ss_sp) { free(((ucontext_t*)cothread)->uc_stack.ss_sp); }
-    free(cothread);
-  }
+void co_delete(cothread_t cothread)
+{
+   if (!cothread)
+      return;
+
+   if(((ucontext_t*)cothread)->uc_stack.ss_sp)
+      free(((ucontext_t*)cothread)->uc_stack.ss_sp);
+   free(cothread);
 }
 
-void co_switch(cothread_t cothread) {
-  ucontext_t *old_thread = co_running;
-  co_running = (ucontext_t*)cothread;
-  swapcontext(old_thread, co_running);
+void co_switch(cothread_t cothread)
+{
+   ucontext_t *old_thread = co_running;
+
+   co_running = (ucontext_t*)cothread;
+   swapcontext(old_thread, co_running);
 }
 
 #ifdef __cplusplus
diff -ru higan_v094-source/libco/x86.c bsneshle094/libco/x86.c
--- higan_v094-source/libco/x86.c	2014-01-20 07:37:11.000000000 +0100
+++ bsneshle094/libco/x86.c	2015-01-12 11:12:54.474889641 +0100
@@ -27,65 +27,89 @@
 
 //ABI: fastcall
 static unsigned char co_swap_function[] = {
-  0x89, 0x22, 0x8B, 0x21, 0x58, 0x89, 0x6A, 0x04, 0x89, 0x72, 0x08, 0x89, 0x7A, 0x0C, 0x89, 0x5A,
-  0x10, 0x8B, 0x69, 0x04, 0x8B, 0x71, 0x08, 0x8B, 0x79, 0x0C, 0x8B, 0x59, 0x10, 0xFF, 0xE0,
+  0x89, 0x22,         /* mov [edx],esp      */
+  0x8b, 0x21,         /* mov esp,[ecx]      */
+  0x58,               /* pop eax            */
+  0x89, 0x6a, 0x04,   /* mov [edx+0x04],ebp */
+  0x89, 0x72, 0x08,   /* mov [edx+0x08],esi */
+  0x89, 0x7a, 0x0c,   /* mov [edx+0x0c],edi */
+  0x89, 0x5a, 0x10,   /* mov [edx+0x10],ebx */
+  0x8b, 0x69, 0x04,   /* mov ebp,[ecx+0x04] */
+  0x8b, 0x71, 0x08,   /* mov esi,[ecx+0x08] */
+  0x8b, 0x79, 0x0c,   /* mov edi,[ecx+0x0c] */
+  0x8b, 0x59, 0x10,   /* mov ebx,[ecx+0x10] */
+  0xff, 0xe0,         /* jmp eax            */
 };
 
 #ifdef _WIN32
-  #include <windows.h>
+#include <windows.h>
 
-  void co_init() {
-    DWORD old_privileges;
-    VirtualProtect(co_swap_function, sizeof co_swap_function, PAGE_EXECUTE_READWRITE, &old_privileges);
-  }
+void co_init(void)
+{
+   DWORD old_privileges;
+   VirtualProtect(co_swap_function,
+         sizeof co_swap_function, PAGE_EXECUTE_READWRITE, &old_privileges);
+}
 #else
-  #include <unistd.h>
-  #include <sys/mman.h>
+#include <unistd.h>
+#include <sys/mman.h>
 
-  void co_init() {
-    unsigned long addr = (unsigned long)co_swap_function;
-    unsigned long base = addr - (addr % sysconf(_SC_PAGESIZE));
-    unsigned long size = (addr - base) + sizeof co_swap_function;
-    mprotect((void*)base, size, PROT_READ | PROT_WRITE | PROT_EXEC);
-  }
+void co_init(void)
+{
+   unsigned long addr = (unsigned long)co_swap_function;
+   unsigned long base = addr - (addr % sysconf(_SC_PAGESIZE));
+   unsigned long size = (addr - base) + sizeof co_swap_function;
+   mprotect((void*)base, size, PROT_READ | PROT_WRITE | PROT_EXEC);
+}
 #endif
 
-static void crash() {
-  assert(0); /* called only if cothread_t entrypoint returns */
+static void crash(void)
+{
+   assert(0); /* called only if cothread_t entrypoint returns */
 }
 
-cothread_t co_active() {
-  if(!co_active_handle) co_active_handle = &co_active_buffer;
-  return co_active_handle;
+cothread_t co_active(void)
+{
+   if(!co_active_handle)
+      co_active_handle = &co_active_buffer;
+   return co_active_handle;
 }
 
-cothread_t co_create(unsigned int size, void (*entrypoint)(void)) {
-  cothread_t handle;
-  if(!co_swap) {
-    co_init();
-    co_swap = (void (fastcall*)(cothread_t, cothread_t))co_swap_function;
-  }
-  if(!co_active_handle) co_active_handle = &co_active_buffer;
-  size += 256; /* allocate additional space for storage */
-  size &= ~15; /* align stack to 16-byte boundary */
-
-  if(handle = (cothread_t)malloc(size)) {
-    long *p = (long*)((char*)handle + size); /* seek to top of stack */
-    *--p = (long)crash;                      /* crash if entrypoint returns */
-    *--p = (long)entrypoint;                 /* start of function */
-    *(long*)handle = (long)p;                /* stack pointer */
-  }
+cothread_t co_create(unsigned int size, void (*entrypoint)(void))
+{
+   cothread_t handle;
+   if(!co_swap)
+   {
+      co_init();
+      co_swap = (void (fastcall*)(cothread_t, cothread_t))co_swap_function;
+   }
+
+   if(!co_active_handle)
+      co_active_handle = &co_active_buffer;
+
+   size += 256; /* allocate additional space for storage */
+   size &= ~15; /* align stack to 16-byte boundary */
+
+   if((handle = (cothread_t)malloc(size)))
+   {
+      long *p = (long*)((char*)handle + size); /* seek to top of stack */
+      *--p = (long)crash;                      /* crash if entrypoint returns */
+      *--p = (long)entrypoint;                 /* start of function */
+      *(long*)handle = (long)p;                /* stack pointer */
+   }
 
-  return handle;
+   return handle;
 }
 
-void co_delete(cothread_t handle) {
-  free(handle);
+void co_delete(cothread_t handle)
+{
+   free(handle);
 }
 
-void co_switch(cothread_t handle) {
-  register cothread_t co_previous_handle = co_active_handle;
-  co_swap(co_active_handle = handle, co_previous_handle);
+void co_switch(cothread_t handle)
+{
+   register cothread_t co_previous_handle = co_active_handle;
+   co_swap(co_active_handle = handle, co_previous_handle);
 }
 
 #ifdef __cplusplus
Only in bsneshle094: LICENSE
diff -ru higan_v094-source/Makefile bsneshle094/Makefile
--- higan_v094-source/Makefile	2013-10-20 14:39:14.000000000 +0200
+++ bsneshle094/Makefile	2014-11-14 23:01:02.553698866 +0100
@@ -1,20 +1,40 @@
 include nall/Makefile
 
+ifeq ($(platform),win)
+  override platform = windows
+else ifeq ($(platform),mingw)
+  override platform = windows
+else ifeq ($(platform),osx)
+  override platform = macosx
+else ifeq ($(platform),unix)
+  override platform = linux
+else ifeq ($(platform),x)
+  override platform = linux
+endif
+
 fc  := fc
 sfc := sfc
 gb  := gb
 gba := gba
 
 profile := accuracy
-target  := ethos
+target  := libretro
 
 # options += debugger
 # arch := x86
 # console := true
 
 # compiler
-flags   += -I. -O3 -fomit-frame-pointer
-link    +=
+
+ifneq ($(debug),)
+  flags := -I. -O0 -g
+else
+  flags := -I. -O3 -fomit-frame-pointer
+endif
+
+cflags := -std=gnu99 -xc
+cppflags := -std=gnu++0x
+
 objects := libco
 
 # profile-guided optimization mode
@@ -28,33 +48,43 @@
   flags += -fprofile-use
 endif
 
-# platform
-ifeq ($(platform),windows)
-  ifeq ($(arch),x86)
-    flags += -m32
-    link += -m32
-  endif
-  ifeq ($(console),true)
-    link += -mconsole
+ifeq ($(compiler),)
+  ifneq ($(CXX),)
+    compiler := $(CXX)
   else
-    link += -mwindows
+    compiler := g++
   endif
-  link += -s -mthreads -luuid -lkernel32 -luser32 -lgdi32 -lcomctl32 -lcomdlg32 -lshell32 -lole32 -lws2_32
-  link += -Wl,-enable-auto-import -Wl,-enable-runtime-pseudo-reloc
-else ifeq ($(platform),macosx)
-  flags += -march=native
-else ifeq ($(platform),linux)
-  flags += -march=native
-  link += -s -Wl,-export-dynamic -lX11 -lXext -ldl
-else ifeq ($(platform),bsd)
-  flags += -march=native
-  link += -s -Wl,-export-dynamic -lX11 -lXext
-else
-  $(error unsupported platform.)
 endif
 
+# platform
 ui := target-$(target)
 
+ifeq ($(findstring libretro,$(ui)),)
+  ifeq ($(platform),windows)
+    ifeq ($(arch),x86)
+      flags += -m32
+      link += -m32
+    endif
+    ifeq ($(console),true)
+      link += -mconsole
+    else
+      link += -mwindows
+    endif
+    link += -s -mthreads -luuid -lkernel32 -luser32 -lgdi32 -lcomctl32 -lcomdlg32 -lshell32 -lole32 -lws2_32
+    link += -Wl,-enable-auto-import -Wl,-enable-runtime-pseudo-reloc
+  else ifeq ($(platform),macosx)
+    flags += -march=native
+  else ifeq ($(platform),linux)
+    flags += -march=native
+    link += -s -Wl,-export-dynamic -lX11 -lXext -ldl
+  else ifeq ($(platform),bsd)
+    flags += -march=native
+    link += -s -Wl,-export-dynamic -lX11 -lXext
+  else
+    $(error unsupported platform.)
+  endif
+endif
+
 # implicit rules
 compile = \
   $(strip \
Only in bsneshle094: make.sh
diff -ru higan_v094-source/nall/file.hpp bsneshle094/nall/file.hpp
--- higan_v094-source/nall/file.hpp	2014-01-20 07:37:12.000000000 +0100
+++ bsneshle094/nall/file.hpp	2014-04-26 17:34:50.338149822 +0200
@@ -9,6 +9,10 @@
 #include <nall/windows/utf8.hpp>
 #include <nall/stream/memory.hpp>
 
+#ifdef __APPLE__
+#include "TargetConditionals.h"
+#endif
+
 namespace nall {
 
 inline FILE* fopen_utf8(const string& filename, const string& mode) {
@@ -232,7 +236,10 @@
   }
 
   static bool exists(const string& filename) {
-    #if !defined(_WIN32)
+    #if defined(__APPLE__) && TARGET_OS_IPHONE
+    struct stat data;
+    if(stat(filename, &data) != 0) return false;
+    #elif !defined(_WIN32)
     struct stat data;
     if(stat(filename, &data) != 0) return false;
     #else
@@ -244,7 +251,10 @@
   }
 
   static uintmax_t size(const string& filename) {
-    #if !defined(_WIN32)
+    #if defined(__APPLE__) && TARGET_OS_IPHONE
+    struct stat data;
+    if(stat(filename, &data) != 0) return false;
+    #elif !defined(_WIN32)
     struct stat data;
     stat(filename, &data);
     #else
@@ -255,7 +265,10 @@
   }
 
   static time_t timestamp(const string& filename, file::time mode = file::time::create) {
-    #if !defined(_WIN32)
+    #if defined(__APPLE__) && TARGET_OS_IPHONE
+    struct stat data;
+    if(stat(filename, &data) != 0) return false;
+    #elif !defined(_WIN32)
     struct stat data;
     stat(filename, &data);
     #else
diff -ru higan_v094-source/nall/intrinsics.hpp bsneshle094/nall/intrinsics.hpp
--- higan_v094-source/nall/intrinsics.hpp	2014-01-20 07:37:12.000000000 +0100
+++ bsneshle094/nall/intrinsics.hpp	2014-05-27 22:37:16.697326984 +0200
@@ -6,7 +6,7 @@
 struct Intrinsics {
   enum class Compiler : unsigned { Clang, GCC, VisualCPP, Unknown };
   enum class Platform : unsigned { Windows, MacOSX, X, Unknown };  //X = Linux, BSD, etc
-  enum class Architecture : unsigned { x86, amd64, Unknown };
+  enum class Architecture : unsigned { x86, amd64, ARM, Unknown };
   enum class Endian : unsigned { LSB, MSB, Unknown };
 
   static inline Compiler compiler();
@@ -57,6 +57,9 @@
 #elif defined(__amd64__) || defined(_M_AMD64)
   #define ARCH_AMD64
   Intrinsics::Architecture Intrinsics::architecture() { return Intrinsics::Architecture::amd64; }
+#elif defined(__arm__) || defined(__ARM_EABI__)
+  #define ARCH_ARM
+  Intrinsics::Architecture Intrinsics::architecture() { return Intrinsics::Architecture::ARM; }
 #else
   #warning "unable to detect architecture"
   #define ARCH_UNKNOWN
@@ -65,7 +68,7 @@
 
 /* Endian detection */
 
-#if (defined(__BYTE_ORDER) && defined(__LITTLE_ENDIAN) && __BYTE_ORDER == __LITTLE_ENDIAN) || defined(__LITTLE_ENDIAN__) || defined(__i386__) || defined(__amd64__) || defined(_M_IX86) || defined(_M_AMD64)
+#if (defined(__BYTE_ORDER) && defined(__LITTLE_ENDIAN) && __BYTE_ORDER == __LITTLE_ENDIAN) || defined(__LITTLE_ENDIAN__) || defined(__i386__) || defined(__amd64__) || defined(_M_IX86) || defined(_M_AMD64) || defined(__ARM_EABI__) || defined(__arm__)
   #define ENDIAN_LSB
   Intrinsics::Endian Intrinsics::endian() { return Intrinsics::Endian::LSB; }
 #elif (defined(__BYTE_ORDER) && defined(__BIG_ENDIAN) && __BYTE_ORDER == __BIG_ENDIAN) || defined(__BIG_ENDIAN__) || defined(__powerpc__) || defined(_M_PPC)
diff -ru higan_v094-source/nall/Makefile bsneshle094/nall/Makefile
--- higan_v094-source/nall/Makefile	2014-01-20 07:37:12.000000000 +0100
+++ bsneshle094/nall/Makefile	2014-08-20 17:41:55.249337200 +0200
@@ -22,6 +22,9 @@
   else ifneq ($(findstring CYGWIN,$(uname)),)
     platform := windows
     delete = del $(subst /,\,$1)
+  else ifneq ($(findstring MINGW,$(uname)),)
+    platform := windows
+    delete = del $(subst /,\,$1)
   else ifneq ($(findstring Darwin,$(uname)),)
     platform := macosx
     delete = rm -f $1
diff -ru higan_v094-source/nall/platform.hpp bsneshle094/nall/platform.hpp
--- higan_v094-source/nall/platform.hpp	2014-01-20 07:37:12.000000000 +0100
+++ bsneshle094/nall/platform.hpp	2014-11-14 23:01:04.933698821 +0100
@@ -41,7 +41,11 @@
   #undef interface
   #define dllexport __declspec(dllexport)
 #else
+#ifdef __APPLE__
+  #include <machine/endian.h>
+#else
   #include <endian.h>
+#endif
   #include <unistd.h>
   #include <pwd.h>
   #define dllexport
Only in bsneshle094/obj: .gitignore
Only in bsneshle094/out: bsnes_mercury_libretro_old.so
Only in bsneshle094/out: .gitignore
Only in bsneshle094/out: libsupergameboy.so
Only in bsneshle094: README
diff -ru higan_v094-source/sfc/alt/cpu/cpu.cpp bsneshle094/sfc/alt/cpu/cpu.cpp
--- higan_v094-source/sfc/alt/cpu/cpu.cpp	2013-05-05 08:00:10.000000000 +0200
+++ bsneshle094/sfc/alt/cpu/cpu.cpp	2014-05-03 20:02:34.275109688 +0200
@@ -99,9 +99,9 @@
   reader = [](unsigned addr) { return cpu.wram[addr]; };
   writer = [](unsigned addr, uint8 data) { cpu.wram[addr] = data; };
 
-  bus.map(reader, writer, 0x00, 0x3f, 0x0000, 0x1fff, 0x002000);
-  bus.map(reader, writer, 0x80, 0xbf, 0x0000, 0x1fff, 0x002000);
-  bus.map(reader, writer, 0x7e, 0x7f, 0x0000, 0xffff, 0x020000);
+  bus.map(reader, writer, 0x00, 0x3f, 0x0000, 0x1fff, 0x002000, 0,0, Cartridge::Mapping::fastmode_readwrite, cpu.wram);
+  bus.map(reader, writer, 0x80, 0xbf, 0x0000, 0x1fff, 0x002000, 0,0, Cartridge::Mapping::fastmode_readwrite, cpu.wram);
+  bus.map(reader, writer, 0x7e, 0x7f, 0x0000, 0xffff, 0x020000, 0,0, Cartridge::Mapping::fastmode_readwrite, cpu.wram);
 }
 
 void CPU::power() {
diff -ru higan_v094-source/sfc/cartridge/cartridge.cpp bsneshle094/sfc/cartridge/cartridge.cpp
--- higan_v094-source/sfc/cartridge/cartridge.cpp	2013-05-05 08:31:39.000000000 +0200
+++ bsneshle094/sfc/cartridge/cartridge.cpp	2014-08-19 15:44:56.053783897 +0200
@@ -49,6 +49,14 @@
   has_hsu1       = false;
   has_msu1       = false;
 
+  has_dsp1        = false;
+  has_dsp2        = false;
+  has_dsp3        = false;
+  has_dsp4        = false;
+  has_cx4         = false;
+  has_st0010      = false;
+  has_sgbexternal = false;
+
   information.markup.cartridge    = "";
   information.markup.gameBoy      = "";
   information.markup.satellaview  = "";
diff -ru higan_v094-source/sfc/cartridge/cartridge.hpp bsneshle094/sfc/cartridge/cartridge.hpp
--- higan_v094-source/sfc/cartridge/cartridge.hpp	2013-01-22 23:52:43.000000000 +0100
+++ bsneshle094/sfc/cartridge/cartridge.hpp	2014-08-19 15:45:47.797784868 +0200
@@ -39,6 +39,13 @@
   readonly<bool> has_obc1;
   readonly<bool> has_hsu1;
   readonly<bool> has_msu1;
+  readonly<bool> has_dsp1;
+  readonly<bool> has_dsp2;
+  readonly<bool> has_dsp3;
+  readonly<bool> has_dsp4;
+  readonly<bool> has_cx4;
+  readonly<bool> has_st0010;
+  readonly<bool> has_sgbexternal;
 
   struct Mapping {
     function<uint8 (unsigned)> reader;
@@ -48,6 +55,9 @@
     unsigned base;
     unsigned mask;
 
+    enum fastmode_t { fastmode_slow, fastmode_readonly, fastmode_readwrite } fastmode;
+    uint8* fastptr;
+
     Mapping();
     Mapping(const function<uint8 (unsigned)>&, const function<void (unsigned, uint8)>&);
     Mapping(SuperFamicom::Memory&);
@@ -116,6 +126,10 @@
   void parse_markup_obc1(Markup::Node);
   void parse_markup_hsu1(Markup::Node);
   void parse_markup_msu1(Markup::Node);
+  
+  void parse_markup_hitachidsp_hle(Markup::Node);
+  void parse_markup_necdsp_hle(Markup::Node);
+  bool parse_markup_icd2_external(Markup::Node);
 
   friend class Interface;
 };
diff -ru higan_v094-source/sfc/cartridge/markup.cpp bsneshle094/sfc/cartridge/markup.cpp
--- higan_v094-source/sfc/cartridge/markup.cpp	2013-12-06 21:58:46.000000000 +0100
+++ bsneshle094/sfc/cartridge/markup.cpp	2014-08-19 16:45:00.909851573 +0200
@@ -64,6 +64,8 @@
       Mapping m(rom);
       parse_markup_map(m, node);
       if(m.size == 0) m.size = rom.size();
+      m.fastmode = Mapping::fastmode_readonly;
+      m.fastptr = rom.data();
       mapping.append(m);
     }
 
@@ -71,6 +73,8 @@
       Mapping m(ram);
       parse_markup_map(m, node);
       if(m.size == 0) m.size = ram.size();
+      m.fastmode = Mapping::fastmode_readwrite;
+      m.fastptr = ram.data();
       mapping.append(m);
     }
   }
@@ -78,6 +82,10 @@
 
 void Cartridge::parse_markup_icd2(Markup::Node root) {
   if(root.exists() == false) return;
+  if(interface->bind->altImplementation(Alt::ForSuperGameBoy)==Alt::SuperGameBoy::External)
+  {
+    if (parse_markup_icd2_external(root)) return;
+  }
   has_gb_slot = true;
   icd2.revision = max(1, numeral(root["revision"].data));
 
@@ -340,6 +348,12 @@
 
 void Cartridge::parse_markup_hitachidsp(Markup::Node root, unsigned roms) {
   if(root.exists() == false) return;
+  if(interface->bind->altImplementation(Alt::ForDSP) == Alt::DSP::HLE)
+  {
+    //this is after checking existence because we don't want to ask which DSP to use and then use none of them
+    parse_markup_hitachidsp_hle(root);
+    return;
+  }
   has_hitachidsp = true;
 
   parse_markup_memory(hitachidsp.rom, root["rom[0]"], ID::HitachiDSPROM, false);
@@ -387,6 +401,11 @@
 
 void Cartridge::parse_markup_necdsp(Markup::Node root) {
   if(root.exists() == false) return;
+  if(interface->bind->altImplementation(Alt::ForDSP)==Alt::DSP::HLE)
+  {
+    parse_markup_necdsp_hle(root);
+    return;
+  }
   has_necdsp = true;
 
   for(auto& word : necdsp.programROM) word = 0x000000;
@@ -586,20 +605,112 @@
   }
 }
 
+void Cartridge::parse_markup_hitachidsp_hle(Markup::Node root) {
+  //root.exists() is known true in the HLE chip handlers
+  parse_markup_cartridge(root);
+
+  has_cx4 = true;
+  for(auto& node : root) {
+    if(node.name != "map" || node["id"].data != "io") continue;
+    Mapping m({&Cx4::read, &cx4}, {&Cx4::write, &cx4});
+    parse_markup_map(m, node);
+    mapping.append(m);
+  }
+}
+
+void Cartridge::parse_markup_necdsp_hle(Markup::Node root) {
+  if (root["model"].data == "uPD7725") {
+    Mapping m;
+    unsigned int select=0;
+    unsigned int * selectaddr=NULL;
+    for(auto& node : root) {
+      if (node.name == "rom" && node["id"].data == "program") {
+        if (node["name"].data == "dsp1.program.rom" || node["name"].data == "dsp1b.program.rom") {
+          has_dsp1 = true;
+          m.reader = {&DSP1::read, &dsp1};
+          m.writer = {&DSP1::write, &dsp1};
+          selectaddr = &dsp1.Select;
+        }
+        if (node["name"].data == "dsp2.program.rom") {
+          has_dsp2 = true;
+          m.reader = {&DSP2::read, &dsp2};
+          m.writer = {&DSP2::write, &dsp2};
+          selectaddr = &dsp2.Select;
+        }
+        if (node["name"].data == "dsp3.program.rom") {
+          has_dsp3 = true;
+          m.reader = {&DSP3::read, &dsp3};
+          m.writer = {&DSP3::write, &dsp3};
+          //some of the chips hardcode the Select value
+        }
+        if (node["name"].data == "dsp4.program.rom") {
+          has_dsp4 = true;
+          m.reader = {&DSP4::read, &dsp4};
+          m.writer = {&DSP4::write, &dsp4};
+        }
+      }
+      if (node.name == "map" && node["id"].data == "io") {
+        parse_markup_map(m, node);
+        select = numeral(node["select"].data);
+      }
+    }
+    if (selectaddr) *selectaddr=select;
+    mapping.append(m);
+  } else {
+    Mapping m({&ST0010::read, &st0010}, {&ST0010::write, &st0010});
+    for(auto& node : root) {
+      if(node.name != "map") continue;
+
+      parse_markup_map(m, node);
+      mapping.append(m);
+    }
+  }
+}
+
+bool Cartridge::parse_markup_icd2_external(Markup::Node root) {
+  //root.exists() is known true here
+  if (!sgbExternal.load_library("/home/alcaro/Desktop/minir/cores/bsnes_v073/supergameboy/libsupergameboy.so"))
+  {
+    interface->bind->notify("Couldn't load external GB emulator, falling back to internal");
+    return false;
+  }
+
+  has_sgbexternal = true;
+  sgbExternal.revision = max(1, numeral(root["revision"].data));
+
+  GameBoy::cartridge.load_empty(GameBoy::System::Revision::SuperGameBoy);
+  interface->loadRequest(ID::SuperGameBoy, "Game Boy", "gb");
+
+  for(auto& node : root) {
+    if(node.name != "map") continue;
+
+    if(node["id"].data == "io") {
+      Mapping m({&SGBExternal::read, &sgbExternal}, {&SGBExternal::write, &sgbExternal});
+      parse_markup_map(m, node);
+      mapping.append(m);
+    }
+  }
+
+  return true;
+}
+
 Cartridge::Mapping::Mapping() {
   size = base = mask = 0;
+  fastmode = Mapping::fastmode_slow;
 }
 
 Cartridge::Mapping::Mapping(SuperFamicom::Memory& memory) {
   reader = {&SuperFamicom::Memory::read,  &memory};
   writer = {&SuperFamicom::Memory::write, &memory};
   size = base = mask = 0;
+  fastmode = Mapping::fastmode_slow;
 }
 
 Cartridge::Mapping::Mapping(const function<uint8 (unsigned)>& reader, const function<void (unsigned, uint8)>& writer) {
   this->reader = reader;
   this->writer = writer;
   size = base = mask = 0;
+  fastmode = Mapping::fastmode_slow;
 }
 
 #endif
diff -ru higan_v094-source/sfc/chip/chip.hpp bsneshle094/sfc/chip/chip.hpp
--- higan_v094-source/sfc/chip/chip.hpp	2013-01-21 07:09:43.000000000 +0100
+++ bsneshle094/sfc/chip/chip.hpp	2014-08-19 15:29:02.525765996 +0200
@@ -25,6 +25,16 @@
 #include <sfc/chip/hsu1/hsu1.hpp>
 #include <sfc/chip/msu1/msu1.hpp>
 
+#include <sfc/chip/dsp1/dsp1.hpp>
+#include <sfc/chip/dsp2/dsp2.hpp>
+#include <sfc/chip/dsp3/dsp3.hpp>
+#include <sfc/chip/dsp4/dsp4.hpp>
+
+#include <sfc/chip/cx4/cx4.hpp>
+#include <sfc/chip/st0010/st0010.hpp>
+
+#include <sfc/chip/sgb-external/sgb-external.hpp>
+
 void Coprocessor::step(unsigned clocks) {
   clock += clocks * (uint64)cpu.frequency;
 }
Only in bsneshle094/sfc/chip: cx4
Only in bsneshle094/sfc/chip: dsp1
Only in bsneshle094/sfc/chip: dsp2
Only in bsneshle094/sfc/chip: dsp3
Only in bsneshle094/sfc/chip: dsp4
Only in bsneshle094/sfc/chip: sgb-external
Only in bsneshle094/sfc/chip: st0010
diff -ru higan_v094-source/sfc/cpu/cpu.cpp bsneshle094/sfc/cpu/cpu.cpp
--- higan_v094-source/sfc/cpu/cpu.cpp	2013-11-09 06:38:15.000000000 +0100
+++ bsneshle094/sfc/cpu/cpu.cpp	2014-05-03 20:02:53.027110040 +0200
@@ -114,9 +114,9 @@
   reader = [](unsigned addr) { return cpu.wram[addr]; };
   writer = [](unsigned addr, uint8 data) { cpu.wram[addr] = data; };
 
-  bus.map(reader, writer, 0x00, 0x3f, 0x0000, 0x1fff, 0x002000);
-  bus.map(reader, writer, 0x80, 0xbf, 0x0000, 0x1fff, 0x002000);
-  bus.map(reader, writer, 0x7e, 0x7f, 0x0000, 0xffff, 0x020000);
+  bus.map(reader, writer, 0x00, 0x3f, 0x0000, 0x1fff, 0x002000, 0,0, Cartridge::Mapping::fastmode_readwrite, cpu.wram);
+  bus.map(reader, writer, 0x80, 0xbf, 0x0000, 0x1fff, 0x002000, 0,0, Cartridge::Mapping::fastmode_readwrite, cpu.wram);
+  bus.map(reader, writer, 0x7e, 0x7f, 0x0000, 0xffff, 0x020000, 0,0, Cartridge::Mapping::fastmode_readwrite, cpu.wram);
 }
 
 void CPU::power() {
diff -ru higan_v094-source/sfc/cpu/timing/timing.hpp bsneshle094/sfc/cpu/timing/timing.hpp
--- higan_v094-source/sfc/cpu/timing/timing.hpp	2010-12-26 16:16:47.000000000 +0100
+++ bsneshle094/sfc/cpu/timing/timing.hpp	2014-05-26 23:52:03.147625704 +0200
@@ -1,7 +1,7 @@
 //timing.cpp
 unsigned dma_counter();
 
-void add_clocks(unsigned clocks);
+alwaysinline void add_clocks(unsigned clocks);
 void scanline();
 
 alwaysinline void alu_edge();
diff -ru higan_v094-source/sfc/interface/interface.hpp bsneshle094/sfc/interface/interface.hpp
--- higan_v094-source/sfc/interface/interface.hpp	2013-12-17 05:31:06.000000000 +0100
+++ bsneshle094/sfc/interface/interface.hpp	2014-08-19 15:43:19.689782088 +0200
@@ -88,6 +88,25 @@
   };
 };
 
+struct Alt {
+  enum : unsigned {
+    ForDSP,
+    ForSuperGameBoy,
+  };
+  struct DSP {
+    enum : unsigned {
+      LLE,
+      HLE,
+    };
+  };
+  struct SuperGameBoy {
+    enum : unsigned {
+      Internal,
+      External,
+    };
+  };
+};
+
 struct Interface : Emulator::Interface {
   string title();
   double videoFrequency();
diff -ru higan_v094-source/sfc/Makefile bsneshle094/sfc/Makefile
--- higan_v094-source/sfc/Makefile	2013-01-23 00:07:55.000000000 +0100
+++ bsneshle094/sfc/Makefile	2014-08-19 15:32:41.245770102 +0200
@@ -9,6 +9,9 @@
 sfc_objects += sfc-spc7110 sfc-sdd1 sfc-obc1
 sfc_objects += sfc-hsu1 sfc-msu1
 sfc_objects += sfc-satellaviewcart sfc-sufamiturbo
+sfc_objects += sfc-hledsp1 sfc-hledsp2 sfc-hledsp3 sfc-hledsp4
+sfc_objects += sfc-hlecx4 sfc-hlest0010
+sfc_objects += sfc-sgbexternal
 objects += $(sfc_objects)
 
 ifeq ($(profile),accuracy)
@@ -70,3 +73,13 @@
 
 obj/sfc-satellaviewcart.o: $(sfc)/slot/satellaview/satellaview.cpp $(call rwildcard,$(sfc)/slot/satellaview/)
 obj/sfc-sufamiturbo.o:     $(sfc)/slot/sufamiturbo/sufamiturbo.cpp $(call rwildcard,$(sfc)/slot/sufamiturbo/)
+
+obj/sfc-hledsp1.o:         $(sfc)/chip/dsp1/dsp1.cpp $(sfc)/chip/dsp1/*
+obj/sfc-hledsp2.o:         $(sfc)/chip/dsp2/dsp2.cpp $(sfc)/chip/dsp2/*
+obj/sfc-hledsp3.o:         $(sfc)/chip/dsp3/dsp3.cpp $(sfc)/chip/dsp3/*
+obj/sfc-hledsp4.o:         $(sfc)/chip/dsp4/dsp4.cpp $(sfc)/chip/dsp4/*
+
+obj/sfc-hlecx4.o:          $(sfc)/chip/cx4/cx4.cpp $(sfc)/chip/cx4/*
+obj/sfc-hlest0010.o:       $(sfc)/chip/st0010/st0010.cpp $(sfc)/chip/st0010/*
+
+obj/sfc-sgbexternal.o:     $(sfc)/chip/sgb-external/sgb-external.cpp $(sfc)/chip/sgb-external/*
diff -ru higan_v094-source/sfc/memory/memory.cpp bsneshle094/sfc/memory/memory.cpp
--- higan_v094-source/sfc/memory/memory.cpp	2013-05-05 09:29:50.000000000 +0200
+++ bsneshle094/sfc/memory/memory.cpp	2014-06-05 22:10:02.955293881 +0200
@@ -1,6 +1,7 @@
 #include <sfc/sfc.hpp>
 
 #define MEMORY_CPP
+
 namespace SuperFamicom {
 
 Bus bus;
@@ -10,22 +11,73 @@
   const function<void (unsigned, uint8)>& writer,
   unsigned banklo, unsigned bankhi,
   unsigned addrlo, unsigned addrhi,
-  unsigned size, unsigned base, unsigned mask
+  unsigned size, unsigned base, unsigned mask,
+  unsigned fastmode, uint8* fastptr
 ) {
   assert(banklo <= bankhi && banklo <= 0xff);
   assert(addrlo <= addrhi && addrlo <= 0xffff);
   assert(idcount < 255);
 
+  bool do_fast=(size%(addrhi+1-addrlo)==0 && !((mask|addrlo|addrhi|size)&fast_page_size_mask));
+  bool do_fast_read =(fastmode!=Cartridge::Mapping::fastmode_slow      && do_fast);
+  bool do_fast_write=(fastmode==Cartridge::Mapping::fastmode_readwrite && do_fast);
+  for(unsigned bank = banklo; bank <= bankhi; bank++) {
+    for(unsigned addr = addrlo&~fast_page_size_mask; addr<=addrhi; addr+=fast_page_size) {
+      unsigned origpos = (bank << 16 | addr);
+      unsigned fastoffset = origpos >> fast_page_size_bits;
+
+      unsigned accesspos = reduce(origpos, mask);
+      if(size) accesspos = base + mirror(accesspos, size - base);
+      if(do_fast_read)  fast_read[fastoffset] = fastptr - origpos + accesspos;
+      else fast_read[fastoffset] = NULL;
+      if(do_fast_write) fast_write[fastoffset] = fastptr - origpos + accesspos;
+      else fast_write[fastoffset] = NULL;
+    }
+  }
+
+#ifdef __LIBRETRO__
+  if (((banklo&-banklo)|0x01000000)>(bankhi-banklo) && (bankhi&(bankhi+1)&~banklo)==0 &&
+      ((addrlo&-addrlo)|0x01000000)>(addrhi-addrlo) && (addrhi&(addrhi+1)&~addrlo)==0)
+  {
+    retro_memory_descriptor desc;
+    desc.flags=(fastmode==Cartridge::Mapping::fastmode_readwrite ? 0 : RETRO_MEMDESC_CONST);
+    desc.ptr=fastptr;
+    desc.offset=0;
+    desc.start=banklo<<16 | addrlo;
+    desc.select=(banklo<<16 | addrlo) ^ (bankhi<<16 | addrhi) ^ 0xFFFFFF;
+    desc.disconnect=mask;
+    desc.len=size;
+    if (!size) desc.len=0x01000000;
+    desc.addrspace=NULL;
+    libretro_mem_map.append(desc);
+  }
+#endif
+
   unsigned id = idcount++;
   this->reader[id] = reader;
   this->writer[id] = writer;
 
-  for(unsigned bank = banklo; bank <= bankhi; bank++) {
-    for(unsigned addr = addrlo; addr <= addrhi; addr++) {
-      unsigned offset = reduce(bank << 16 | addr, mask);
-      if(size) offset = base + mirror(offset, size - base);
-      lookup[bank << 16 | addr] = id;
-      target[bank << 16 | addr] = offset;
+  if (!(mask & (addrlo^addrhi)) && size%(addrhi+1-addrlo)==0) {
+    //fastpath for common cases
+    for(unsigned bank = banklo; bank <= bankhi; bank++) {
+      unsigned offset = reduce(bank << 16 | addrlo, mask);
+      if (size) offset = base + mirror(offset, size - base);
+      unsigned pos = (bank<<16 | addrlo);
+      unsigned end = (bank<<16 | addrhi);
+      while (pos <= end) {
+        lookup[pos] = id;
+        target[pos] = offset++;
+        pos++;
+      }
+    }
+  } else {
+    for(unsigned bank = banklo; bank <= bankhi; bank++) {
+      for(unsigned addr = addrlo; addr <= addrhi; addr++) {
+        unsigned offset = reduce(bank << 16 | addr, mask);
+        if(size) offset = base + mirror(offset, size - base);
+        lookup[bank << 16 | addr] = id;
+        target[bank << 16 | addr] = offset;
+      }
     }
   }
 }
@@ -34,6 +86,10 @@
   function<uint8 (unsigned)> reader = [](unsigned) { return cpu.regs.mdr; };
   function<void (unsigned, uint8)> writer = [](unsigned, uint8) {};
 
+#ifdef __LIBRETRO__
+  libretro_mem_map.reset();
+#endif
+
   idcount = 0;
   map(reader, writer, 0x00, 0xff, 0x0000, 0xffff);
 }
@@ -51,7 +107,7 @@
         unsigned bankhi = hex(bankpart(1, bankpart(0)));
         unsigned addrlo = hex(addrpart(0));
         unsigned addrhi = hex(addrpart(1, addrpart(0)));
-        map(m.reader, m.writer, banklo, bankhi, addrlo, addrhi, m.size, m.base, m.mask);
+        map(m.reader, m.writer, banklo, bankhi, addrlo, addrhi, m.size, m.base, m.mask, m.fastmode, m.fastptr);
       }
     }
   }
diff -ru higan_v094-source/sfc/memory/memory.hpp bsneshle094/sfc/memory/memory.hpp
--- higan_v094-source/sfc/memory/memory.hpp	2013-05-05 09:30:28.000000000 +0200
+++ bsneshle094/sfc/memory/memory.hpp	2014-06-05 21:25:47.259294198 +0200
@@ -1,7 +1,12 @@
+#ifdef __LIBRETRO__
+#include "../../target-libretro/libretro.h"
+#endif
+
 struct Memory {
   virtual inline unsigned size() const;
   virtual uint8 read(unsigned addr) = 0;
   virtual void write(unsigned addr, uint8 data) = 0;
+  virtual uint8* data() { return NULL; }
 };
 
 struct StaticRAM : Memory {
@@ -56,12 +61,19 @@
   function<uint8 (unsigned)> reader[256];
   function<void (unsigned, uint8)> writer[256];
 
+  static const uint32 fast_page_size_bits = 13;//keep at 13 or lower so the RAM mirrors can be on the fast path
+  static const uint32 fast_page_size = (1 << fast_page_size_bits);
+  static const uint32 fast_page_size_mask = (fast_page_size - 1);
+  uint8* fast_read[0x1000000>>fast_page_size_bits];
+  uint8* fast_write[0x1000000>>fast_page_size_bits];
+
   void map(
     const function<uint8 (unsigned)>& reader,
     const function<void (unsigned, uint8)>& writer,
     unsigned banklo, unsigned bankhi,
     unsigned addrlo, unsigned addrhi,
-    unsigned size = 0, unsigned base = 0, unsigned mask = 0
+    unsigned size = 0, unsigned base = 0, unsigned mask = 0,
+    unsigned fastmode = 0, uint8* fast_ptr = NULL
   );
 
   void map_reset();
@@ -69,6 +81,10 @@
 
   Bus();
   ~Bus();
+
+#ifdef __LIBRETRO__
+  vector<retro_memory_descriptor> libretro_mem_map;
+#endif
 };
 
 extern Bus bus;
diff -ru higan_v094-source/sfc/memory/memory-inline.hpp bsneshle094/sfc/memory/memory-inline.hpp
--- higan_v094-source/sfc/memory/memory-inline.hpp	2014-01-13 07:27:34.000000000 +0100
+++ bsneshle094/sfc/memory/memory-inline.hpp	2014-05-13 17:48:18.379765481 +0200
@@ -73,26 +73,38 @@
   return base;
 }
 
-unsigned Bus::reduce(unsigned addr, unsigned mask) {
-  unsigned result = 0, length = 0;
-  for(unsigned n = 0; n < 24; n++) {
-    unsigned bit = 1 << n;
-    if(mask & bit) continue;
-    result |= (bool)(addr & bit) << length++;
+unsigned Bus::reduce(unsigned addr, unsigned mask)
+{
+  while (mask)
+  {
+    //extract the bits to keep
+    //set everything below the lowest set bit; 0x018000 -> 0x007FFF
+    unsigned tmp=((mask-1)&(~mask));
+    
+    //shift everything above that
+    addr=(addr&tmp)|((addr>>1)&~tmp);
+    
+    //adjust the mask
+    mask=(mask&(mask-1))>>1;
   }
-  return result;
+  return addr;
 }
 
 uint8 Bus::read(unsigned addr) {
-  uint8 data = reader[lookup[addr]](target[addr]);
+  uint8 data;
+  if (fast_read[addr>>fast_page_size_bits]) data = fast_read[addr>>fast_page_size_bits][addr];
+  else data = reader[lookup[addr]](target[addr]);
 
+#ifndef __LIBRETRO__
   if(cheat.enable()) {
     if(auto result = cheat.find(addr, data)) return result();
   }
+#endif
 
   return data;
 }
 
 void Bus::write(unsigned addr, uint8 data) {
-  return writer[lookup[addr]](target[addr], data);
+  if (fast_write[addr>>fast_page_size_bits]) fast_write[addr>>fast_page_size_bits][addr] = data;
+  else writer[lookup[addr]](target[addr], data);
 }
diff -ru higan_v094-source/sfc/ppu/background/background.hpp bsneshle094/sfc/ppu/background/background.hpp
--- higan_v094-source/sfc/ppu/background/background.hpp	2013-05-05 09:31:28.000000000 +0200
+++ bsneshle094/sfc/ppu/background/background.hpp	2014-05-03 23:18:53.731330831 +0200
@@ -60,21 +60,21 @@
     uint8 data[8];
   };
 
-  void frame();
-  void scanline();
-  void begin();
-  void run(bool screen);
-  void reset();
+  inline void frame();
+  inline void scanline();
+  inline void begin();
+  inline void run(bool screen);
+  inline void reset();
 
-  void get_tile();
-  unsigned get_tile_color();
-  unsigned get_tile(unsigned x, unsigned y);
-  signed clip(signed n);
-  void begin_mode7();
-  void run_mode7();
+  inline void get_tile();
+  inline unsigned get_tile_color();
+  inline unsigned get_tile(unsigned x, unsigned y);
+  inline signed clip(signed n);
+  inline void begin_mode7();
+  inline void run_mode7();
 
-  void serialize(serializer&);
-  Background(PPU& self, unsigned id);
+  inline void serialize(serializer&);
+  inline Background(PPU& self, unsigned id);
 
   PPU& self;
   friend class PPU;
diff -ru higan_v094-source/sfc/ppu/screen/screen.hpp bsneshle094/sfc/ppu/screen/screen.hpp
--- higan_v094-source/sfc/ppu/screen/screen.hpp	2013-05-05 09:36:42.000000000 +0200
+++ bsneshle094/sfc/ppu/screen/screen.hpp	2014-05-03 23:19:20.659331336 +0200
@@ -29,19 +29,19 @@
     bool color_halve;
   } math;
 
-  void scanline();
-  void run();
-  void reset();
+  inline void scanline();
+  inline void run();
+  inline void reset();
 
-  uint16 get_pixel_sub(bool hires);
-  uint16 get_pixel_main();
-  uint16 addsub(unsigned x, unsigned y);
-  uint16 get_color(unsigned palette);
-  uint16 get_direct_color(unsigned palette, unsigned tile);
-  uint16 fixed_color() const;
+  inline uint16 get_pixel_sub(bool hires);
+  inline uint16 get_pixel_main();
+  inline uint16 addsub(unsigned x, unsigned y);
+  inline uint16 get_color(unsigned palette);
+  inline uint16 get_direct_color(unsigned palette, unsigned tile);
+  inline uint16 fixed_color() const;
 
-  void serialize(serializer&);
-  Screen(PPU& self);
+  inline void serialize(serializer&);
+  inline Screen(PPU& self);
 
   PPU& self;
   friend class PPU;
diff -ru higan_v094-source/sfc/ppu/sprite/sprite.hpp bsneshle094/sfc/ppu/sprite/sprite.hpp
--- higan_v094-source/sfc/ppu/sprite/sprite.hpp	2013-05-05 09:37:44.000000000 +0200
+++ bsneshle094/sfc/ppu/sprite/sprite.hpp	2014-05-03 23:18:08.691329985 +0200
@@ -60,22 +60,22 @@
   } output;
 
   //list.cpp
-  void update(unsigned addr, uint8 data);
-  void synchronize();
+  inline void update(unsigned addr, uint8 data);
+  inline void synchronize();
 
   //sprite.cpp
-  void address_reset();
-  void set_first_sprite();
-  void frame();
-  void scanline();
-  void run();
-  void tilefetch();
-  void reset();
+  inline void address_reset();
+  inline void set_first_sprite();
+  inline void frame();
+  inline void scanline();
+  inline void run();
+  inline void tilefetch();
+  inline void reset();
 
-  bool on_scanline(SpriteItem&);
+  inline bool on_scanline(SpriteItem&);
 
-  void serialize(serializer&);
-  Sprite(PPU& self);
+  inline void serialize(serializer&);
+  inline Sprite(PPU& self);
 
   PPU& self;
   friend class PPU;
diff -ru higan_v094-source/sfc/ppu/window/window.hpp bsneshle094/sfc/ppu/window/window.hpp
--- higan_v094-source/sfc/ppu/window/window.hpp	2013-05-05 09:40:42.000000000 +0200
+++ bsneshle094/sfc/ppu/window/window.hpp	2014-05-03 23:19:37.315331649 +0200
@@ -69,19 +69,19 @@
     bool two;
   };
 
-  void scanline();
-  void run();
-  void reset();
+  inline void scanline();
+  inline void run();
+  inline void reset();
 
-  void test(
+  inline void test(
     bool& main, bool& sub,
     bool one_enable, bool one_invert,
     bool two_enable, bool two_invert,
     uint8 mask, bool main_enable, bool sub_enable
   );
 
-  void serialize(serializer&);
-  Window(PPU& self);
+  inline void serialize(serializer&);
+  inline Window(PPU& self);
 
   PPU& self;
   friend class PPU;
diff -ru higan_v094-source/sfc/system/serialization.cpp bsneshle094/sfc/system/serialization.cpp
--- higan_v094-source/sfc/system/serialization.cpp	2013-05-05 09:48:32.000000000 +0200
+++ bsneshle094/sfc/system/serialization.cpp	2014-08-19 16:07:51.405809717 +0200
@@ -73,6 +73,13 @@
   if(cartridge.has_hsu1()) hsu1.serialize(s);
   if(cartridge.has_msu1()) msu1.serialize(s);
   if(cartridge.has_st_slots()) sufamiturboA.serialize(s), sufamiturboB.serialize(s);
+  if(cartridge.has_dsp1()) dsp1.serialize(s);
+  if(cartridge.has_dsp2()) dsp2.serialize(s);
+  //if(cartridge.has_dsp3()) dsp3.serialize(s);
+  //if(cartridge.has_dsp4()) dsp4.serialize(s);
+  if(cartridge.has_cx4()) cx4.serialize(s);
+  if(cartridge.has_st0010()) st0010.serialize(s);
+  if(cartridge.has_sgbexternal()) sgbExternal.serialize(s);
 }
 
 //perform dry-run state save:
diff -ru higan_v094-source/sfc/system/system.cpp bsneshle094/sfc/system/system.cpp
--- higan_v094-source/sfc/system/system.cpp	2014-01-13 07:06:55.000000000 +0100
+++ bsneshle094/sfc/system/system.cpp	2014-08-19 17:20:40.337891738 +0200
@@ -83,6 +83,14 @@
   msu1.init();
   satellaviewcartridge.init();
 
+  dsp1.init();
+  dsp2.init();
+  dsp3.init();
+  dsp4.init();
+  cx4.init();
+  st0010.init();
+  sgbExternal.init();
+
   video.init();
   audio.init();
 
@@ -94,6 +102,9 @@
 }
 
 void System::load() {
+#ifdef __LIBRETRO__
+  interface->loadRequest(ID::IPLROM, "");
+#else
   string manifest = string::read({interface->path(ID::System), "manifest.bml"});
   auto document = Markup::Document(manifest);
 
@@ -101,6 +112,7 @@
   if(!file::exists({interface->path(ID::System), document["system/smp/rom/name"].data})) {
     interface->notify("Error: required Super Famicom firmware ipl.rom not found.\n");
   }
+#endif
 
   region = configuration.region;
   expansion = configuration.expansion_port;
@@ -138,6 +150,13 @@
   if(cartridge.has_msu1()) msu1.load();
   if(cartridge.has_bs_slot()) satellaviewcartridge.load();
   if(cartridge.has_st_slots()) sufamiturboA.load(), sufamiturboB.load();
+  if(cartridge.has_dsp1()) dsp1.load();
+  if(cartridge.has_dsp2()) dsp2.load();
+  if(cartridge.has_dsp3()) dsp3.load();
+  if(cartridge.has_dsp4()) dsp4.load();
+  if(cartridge.has_cx4()) cx4.load();
+  if(cartridge.has_st0010()) st0010.load();
+  if(cartridge.has_sgbexternal()) sgbExternal.load();
 
   serialize_init();
 }
@@ -162,6 +181,14 @@
   if(cartridge.has_msu1()) msu1.unload();
   if(cartridge.has_bs_slot()) satellaviewcartridge.unload();
   if(cartridge.has_st_slots()) sufamiturboA.unload(), sufamiturboB.unload();
+
+  if(cartridge.has_dsp1()) dsp1.unload();
+  if(cartridge.has_dsp2()) dsp2.unload();
+  if(cartridge.has_dsp3()) dsp3.unload();
+  if(cartridge.has_dsp4()) dsp4.unload();
+  if(cartridge.has_cx4()) cx4.unload();
+  if(cartridge.has_st0010()) st0010.unload();
+  if(cartridge.has_sgbexternal()) sgbExternal.unload();
 }
 
 void System::power() {
@@ -191,6 +218,14 @@
   if(cartridge.has_msu1()) msu1.power();
   if(cartridge.has_bs_slot()) satellaviewcartridge.power();
 
+  if(cartridge.has_dsp1()) dsp1.power();
+  if(cartridge.has_dsp2()) dsp2.power();
+  if(cartridge.has_dsp3()) dsp3.power();
+  if(cartridge.has_dsp4()) dsp4.power();
+  if(cartridge.has_cx4()) cx4.power();
+  if(cartridge.has_st0010()) st0010.power();
+  if(cartridge.has_sgbexternal()) sgbExternal.power();
+
   reset();
 }
 
@@ -231,6 +266,15 @@
   if(cartridge.has_spc7110()) cpu.coprocessors.append(&spc7110);
   if(cartridge.has_msu1()) cpu.coprocessors.append(&msu1);
 
+  if(cartridge.has_dsp1()) dsp1.reset();
+  if(cartridge.has_dsp2()) dsp2.reset();
+  if(cartridge.has_dsp3()) dsp3.reset();
+  if(cartridge.has_dsp4()) dsp4.reset();
+  if(cartridge.has_cx4()) cx4.reset();
+  if(cartridge.has_st0010()) st0010.reset();
+  if(cartridge.has_sgbexternal()) sgbExternal.reset();
+  if(cartridge.has_sgbexternal()) cpu.coprocessors.append(&sgbExternal);
+
   scheduler.init();
   input.connect(0, configuration.controller_port1);
   input.connect(1, configuration.controller_port2);
Only in bsneshle094: target-libretro
